import smtplib
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import re
from typing import Optional, Tuple
import logging

# Set up logging for email operations
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EmailSender:
    """
    Professional email sending class for Scout newsletters
    Supports Gmail SMTP and other providers
    """
    
    def __init__(self):
        self.smtp_server = None
        self.smtp_port = None
        self.email_address = None
        self.email_password = None
        self.setup_email_config()
    
    def setup_email_config(self):
        """Setup email configuration from environment variables"""
        # Support multiple email providers
        self.email_address = os.getenv('SMTP_EMAIL')
        self.email_password = os.getenv('SMTP_PASSWORD')
        
        # Default to Gmail settings (most common)
        self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))
        
        logger.info(f"Email config loaded - Server: {self.smtp_server}:{self.smtp_port}")
    
    def validate_email(self, email: str) -> bool:
        """
        Validate email address format
        Returns True if valid, False otherwise
        """
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return re.match(pattern, email) is not None
    
    def create_newsletter_email(self, 
                              recipient_email: str, 
                              subject: str, 
                              newsletter_content: str,
                              topic: str) -> MIMEMultipart:
        """
        Create a professional newsletter email with HTML formatting
        """
        # Create message container
        msg = MIMEMultipart('alternative')
        msg['From'] = f"Scout AI Newsletter <{self.email_address}>"
        msg['To'] = recipient_email
        msg['Subject'] = subject
        
        # Create both plain text and HTML versions
        text_content = self.create_text_version(newsletter_content, topic)
        html_content = self.create_html_version(newsletter_content, topic)
        
        # Add both versions to email
        text_part = MIMEText(text_content, 'plain', 'utf-8')
        html_part = MIMEText(html_content, 'html', 'utf-8')
        
        msg.attach(text_part)
        msg.attach(html_part)
        
        return msg
    
    def create_text_version(self, newsletter_content: str, topic: str) -> str:
        """Create plain text version of newsletter"""
        return f"""
üöÄ Scout AI Newsletter

Topic: {topic}

{newsletter_content}

---
Generated by Scout AI Newsletter Generator
Powered by Tavily Search & OpenAI

This newsletter was researched and generated using AI technology.
For more information, visit our web app.
        """.strip()
    
    def create_html_version(self, newsletter_content: str, topic: str) -> str:
        """Create beautiful HTML version of newsletter"""
        # Convert markdown to basic HTML formatting
        html_content = newsletter_content.replace('\n', '<br>')
        html_content = self.convert_markdown_to_html(html_content)
        
        return f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scout AI Newsletter</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }}
        .container {{
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .header {{
            text-align: center;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 30px;
        }}
        .header h1 {{
            margin: 0;
            font-size: 24px;
        }}
        .topic {{
            background: #e3f2fd;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid #2196f3;
        }}
        .content {{
            font-size: 16px;
            line-height: 1.8;
        }}
        .footer {{
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            text-align: center;
            color: #666;
            font-size: 14px;
        }}
        .powered-by {{
            background: #f5f5f5;
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ Scout AI Newsletter</h1>
            <p>AI-Powered Research & Insights</p>
        </div>
        
        <div class="topic">
            <strong>üìù Topic:</strong> {topic}
        </div>
        
        <div class="content">
            {html_content}
        </div>
        
        <div class="footer">
            <div class="powered-by">
                <strong>ü§ñ Generated by Scout AI Newsletter Generator</strong><br>
                Powered by Tavily Search & OpenAI<br>
                <em>This newsletter was researched and generated using AI technology</em>
            </div>
            <p>
                <small>Scout v2.0 - Now with email delivery! üìß</small>
            </p>
        </div>
    </div>
</body>
</html>
        """.strip()
    
    def convert_markdown_to_html(self, content: str) -> str:
        """Convert basic markdown formatting to HTML"""
        # Headers
        content = re.sub(r'^### (.*$)', r'<h3>\1</h3>', content, flags=re.MULTILINE)
        content = re.sub(r'^## (.*$)', r'<h2>\1</h2>', content, flags=re.MULTILINE)
        content = re.sub(r'^# (.*$)', r'<h1>\1</h1>', content, flags=re.MULTILINE)
        
        # Bold and italic
        content = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', content)
        content = re.sub(r'\*(.*?)\*', r'<em>\1</em>', content)
        
        # Lists (basic)
        content = re.sub(r'^- (.*$)', r'<li>\1</li>', content, flags=re.MULTILINE)
        
        return content
    
    def send_newsletter(self, 
                       recipient_email: str, 
                       newsletter_content: str, 
                       topic: str) -> Tuple[bool, str]:
        """
        Send newsletter email to recipient
        Returns (success: bool, message: str)
        """
        try:
            # Validate email first
            if not self.validate_email(recipient_email):
                return False, "Invalid email address format"
            
            # Check if email configuration is available
            if not self.email_address or not self.email_password:
                return False, "Email configuration not found. Please check SMTP_EMAIL and SMTP_PASSWORD environment variables."
            
            # Create subject line
            subject = f"üöÄ Your Scout Newsletter: {topic[:50]}{'...' if len(topic) > 50 else ''}"
            
            # Create email message
            msg = self.create_newsletter_email(recipient_email, subject, newsletter_content, topic)
            
            # Connect to SMTP server and send
            logger.info(f"Connecting to {self.smtp_server}:{self.smtp_port}")
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()  # Enable security
                server.login(self.email_address, self.email_password)
                
                # Send the email
                text = msg.as_string()
                server.sendmail(self.email_address, recipient_email, text)
                
                logger.info(f"Newsletter sent successfully to {recipient_email}")
                return True, f"Newsletter sent successfully to {recipient_email}!"
                
        except smtplib.SMTPAuthenticationError:
            error_msg = "Email authentication failed. Please check your email credentials."
            logger.error(error_msg)
            return False, error_msg
            
        except smtplib.SMTPRecipientsRefused:
            error_msg = f"Recipient email address '{recipient_email}' was refused by the server."
            logger.error(error_msg)
            return False, error_msg
            
        except smtplib.SMTPException as e:
            error_msg = f"SMTP error occurred: {str(e)}"
            logger.error(error_msg)
            return False, error_msg
            
        except Exception as e:
            error_msg = f"Unexpected error sending email: {str(e)}"
            logger.error(error_msg)
            return False, error_msg
    
    def test_email_connection(self) -> Tuple[bool, str]:
        """
        Test email connection without sending
        Returns (success: bool, message: str)
        """
        try:
            if not self.email_address or not self.email_password:
                return False, "Email credentials not configured"
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.email_address, self.email_password)
                return True, "Email connection successful!"
                
        except Exception as e:
            return False, f"Connection failed: {str(e)}"

# Helper function for easy use in other modules
def send_newsletter_email(recipient_email: str, newsletter_content: str, topic: str) -> Tuple[bool, str]:
    """
    Simple function to send newsletter email
    Returns (success: bool, message: str)
    """
    sender = EmailSender()
    return sender.send_newsletter(recipient_email, newsletter_content, topic)

# Test function for development
def test_email_setup() -> None:
    """Test email configuration and connection"""
    sender = EmailSender()
    success, message = sender.test_email_connection()
    print(f"Email test: {'‚úÖ SUCCESS' if success else '‚ùå FAILED'}")
    print(f"Message: {message}")

if __name__ == "__main__":
    # Run test when script is executed directly
    test_email_setup() 